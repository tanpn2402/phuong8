{"version":3,"sources":["IdentityDialog.js","index.js"],"names":["URL","window","apiURL","IdentityDialog","props","state","open","data","loading","nextProps","this","fetchData","setState","fileid","fetch","method","headers","body","JSON","stringify","then","e","json","ok","idOpenLoading","classes","Dialog","onClose","paper","dialogPaper","DialogTitle","DialogContent","Typography","component","length","Grid","container","justify","item","map","Paper","className","imageContainer","key","id","clearImage","Tooltip","title","IconButton","onClick","onRotateImage","onDownloadImage","onRemoveImage","src","value","alt","image","openImage","alignItems","Button","color","variant","onChooseFile","Date","getTime","type","onChange","onfileChange","style","display","dir","r","document","getElementById","transform","replace","parseInt","blob","dataURI","byteString","atob","split","mimeString","ab","ArrayBuffer","ia","Uint8Array","i","charCodeAt","Blob","dataURItoBlob","url","createObjectURL","a","createElement","href","download","appendChild","click","remove","d","filter","el","concat","file","target","files","self","reader","FileReader","onload","base64","result","insertId","readAsDataURL","React","Component","withStyles","theme","minWidth","width","height","objectFit","position","marginBottom","justifyContent","top","right","backgroundColor","zIndex","getUrlParam","p","location","search","params","App","zoom","isOpenIdentityList","refs","opacity","print","searchParams","payload","isArray","RegExp","str","photo","alert","Object","keys","err","ref","flex","onViewIdentity","onZoomIn","onZoomOut","onSave","onPrint","ReactDOM","render"],"mappings":"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","file":"static/js/main.2a00f83b.chunk.js","sourcesContent":["import React from 'react';\nimport { Dialog, Button, Paper, Tooltip } from '@material-ui/core';\nimport { DialogTitle } from '@material-ui/core';\nimport { DialogContent } from '@material-ui/core';\nimport { withStyles } from '@material-ui/core';\nimport { Typography } from '@material-ui/core';\nimport { Grid } from '@material-ui/core';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport RotateLeftIcon from '@material-ui/icons/RotateLeft';\nimport RotateRightIcon from '@material-ui/icons/RotateRight';\nimport { IconButton } from '@material-ui/core';\nimport { saveAs } from 'file-saver';\n\nconst URL = window.apiURL || 'http://127.0.0.1:33003';\n\nfunction dataURItoBlob(dataURI) {\n    // convert base64 to raw binary data held in a string\n    // doesn't handle URLEncoded DataURIs - see SO answer #6850276 for code that does this\n    var byteString = atob(dataURI.split(',')[1]);\n\n    // separate out the mime component\n    var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0]\n\n    // write the bytes of the string to an ArrayBuffer\n    var ab = new ArrayBuffer(byteString.length);\n    var ia = new Uint8Array(ab);\n    for (var i = 0; i < byteString.length; i++) {\n        ia[i] = byteString.charCodeAt(i);\n    }\n\n    // write the ArrayBuffer to a blob, and you're done\n    var bb = new Blob([ab], { type: mimeString });\n    return bb;\n}\n\nclass IdentityDialog extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            open: false,\n            data: [],\n            loading: true\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.open !== this.state.open) {\n            this.fetchData(nextProps.data);\n            this.setState({\n                open: nextProps.open,\n                data: []\n            })\n        }\n    }\n\n    fetchData({ fileid }) {\n        this.setState({ loading: true })\n        fetch(URL + '/api/identity/get', {\n            method: 'POST',\n            headers: {\n                'Content-type': 'application/json; charset=utf-8'\n            },\n            body: JSON.stringify({\n                fileid\n            })\n        })\n            .then(e => e.json())\n            .then(e => {\n                this.setState({ loading: false })\n\n                if (e.ok) {\n                    this.setState({\n                        data: e.data\n                    })\n                }\n            })\n    }\n\n    render() {\n        const { open, loading, data, idOpenLoading } = this.state;\n        const { classes } = this.props;\n\n\n        return <>\n            <Dialog open={open}\n                onClose={() => this.setState({ open: false })}\n                classes={{\n                    paper: classes.dialogPaper\n                }}\n            >\n                <DialogTitle>CMND</DialogTitle>\n                <DialogContent>\n                    {loading && <Typography component='small'>Đang tải...</Typography>}\n                    {!loading && data && data.length === 0 && <Typography component='small'>Không tìm thấy dữ liệu</Typography>}\n                    <Grid container justify='center'>\n                        <Grid item>\n                            {data && data.map(e => {\n                                return <Paper className={classes.imageContainer} key={e.id}>\n                                    <div className={classes.clearImage}>\n                                        <Tooltip title='Xoay trái'>\n                                            <IconButton onClick={() => this.onRotateImage(e, -1)}>\n                                                <RotateLeftIcon />\n                                            </IconButton>\n                                        </Tooltip>\n                                        <Tooltip title='Xoay phải'>\n                                            <IconButton onClick={() => this.onRotateImage(e, 1)}>\n                                                <RotateRightIcon />\n                                            </IconButton>\n                                        </Tooltip>\n                                        <Tooltip title='Tải xuống'>\n                                            <IconButton onClick={() => this.onDownloadImage(e)}>\n                                                <ArrowDownwardIcon />\n                                            </IconButton>\n                                        </Tooltip>\n                                        <Tooltip title='Xóa'>\n                                            <IconButton onClick={() => this.onRemoveImage(e)}>\n                                                <ClearIcon />\n                                            </IconButton>\n                                        </Tooltip>\n                                    </div>\n                                    <img src={e.value} alt={'adsa'} className={classes.image} id={'imag-' + e.id} onClick={() => this.openImage(e)} />\n                                </Paper>\n                            })}\n                        </Grid>\n                    </Grid>\n                    <br />\n                    <br />\n                    <Grid container alignItems='center' justify='center'>\n                        <Grid item>\n                            <Button color='primary' variant='contained' onClick={() => this.onChooseFile()}>Thêm mới</Button>\n                            <input key={new Date().getTime()} type='file' id=\"getFile\" onChange={e => this.onfileChange(e)} style={{ display: 'none' }}></input>\n                        </Grid>\n                    </Grid>\n                </DialogContent>\n            </Dialog>\n\n            <Dialog open={idOpenLoading}>\n                <DialogContent>\n                    <Typography component='small'>Đang upload...</Typography>\n                </DialogContent>\n            </Dialog>\n        </>\n    }\n\n    onRotateImage(data, dir) {\n        let r = document.getElementById('imag-' + data.id).style.transform;\n        r = r.replace('rotate(', '');\n        r = r.replace('deg)', '');\n\n        if (r === '') {\n            r = 0;\n        }\n\n        r = parseInt(r) + dir * 90;\n\n        document.getElementById('imag-' + data.id).style.transform = `rotate(${r}deg)`;\n    }\n\n    openImage(data) {\n        // let w = window.open('', '_blank');\n        // let image = new Image();\n        // image.src = data.value;\n        // setTimeout(function () {\n        //     w.document.write(image.outerHTML);\n        // }, 0);\n    }\n\n    onDownloadImage(data) {\n        // let url = URL + '/api/identity/download?id=' + data.id;\n        // saveAs(data.value);\n\n        let blob = dataURItoBlob(data.value);\n        var url = window.URL.createObjectURL(blob);\n        var a = document.createElement('a');\n        a.href = url;\n        a.download = '';\n        document.body.appendChild(a);\n        a.click();\n        a.remove();\n\n        // fetch(data.value)\n        //     .then(res => res.blob())\n        //     .then(console.log)\n\n    }\n\n    onRemoveImage(data) {\n        fetch(URL + '/api/identity/delete', {\n            method: 'POST',\n            headers: {\n                'Content-type': 'application/json; charset=utf-8'\n            },\n            body: JSON.stringify({\n                id: data.id\n            })\n        })\n            .then(e => e.json())\n            .then(e => {\n                if (e.ok) {\n                    let d = this.state.data.filter(el => el.id !== data.id);\n\n                    this.setState({\n                        data: [].concat(d)\n                    })\n                }\n            })\n    }\n\n    onChooseFile() {\n        document.getElementById('getFile').click();\n    }\n\n    onfileChange(e) {\n        const { data } = this.props;\n        let file = e.target.files[0];\n        let self = this;\n\n        if (file) {\n            self.setState({ idOpenLoading: true })\n            const reader = new FileReader();\n\n            reader.onload = function (e) {\n                let base64 = e.target.result;\n\n                fetch(URL + '/api/identity/insert', {\n                    method: 'POST',\n                    headers: {\n                        'Content-type': 'application/json; charset=utf-8'\n                    },\n                    body: JSON.stringify({\n                        fileid: data.fileid,\n                        value: base64\n                    })\n                })\n                    .then(e => e.json())\n                    .then(e => {\n                        self.setState({ idOpenLoading: false });\n                        if (e.ok) {\n                            self.setState({\n                                data: [].concat(self.state.data).concat({ id: e.insertId, value: base64 })\n                            })\n                        }\n                    })\n            }\n\n            reader.readAsDataURL(file);\n        }\n    }\n}\n\nconst styles = theme => ({\n    dialogPaper: {\n        minWidth: 800\n    },\n    image: {\n        width: 500,\n        height: 360,\n        objectFit: 'contain'\n    },\n    imageContainer: {\n        position: 'relative',\n        width: 600,\n        height: 500,\n        marginBottom: 10,\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center'\n    },\n    clearImage: {\n        position: 'absolute',\n        top: 0,\n        right: 0,\n        backgroundColor: '#3f51b5',\n        zIndex: 9\n    }\n})\n\nexport default withStyles(styles)(IdentityDialog); ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { isArray } from 'util';\nimport IdentityDialog from './IdentityDialog';\n\nconst URL = window.apiURL || 'http://127.0.0.1:33003';\n\nfunction replaceAll(src, search, replacement) {\n    var target = src;\n    return target.replace(new RegExp(search, 'g'), replacement);\n};\n\nconst getUrlParam = () => {\n    let searchParams = window.location.search;\n    let p = searchParams.split('?');\n    let params = {};\n    p.map(e => {\n        if (e) {\n            params[e.split('=')[0]] = e.split('=')[1];\n        }\n    })\n\n    return params;\n}\n\nclass App extends React.Component {\n    state = {\n        zoom: 100,\n        isOpenIdentityList: false\n    }\n\n    onPrint() {\n        this.refs.container.style.opacity = '0';\n        window.print();\n        this.refs.container.style.opacity = '1';\n    }\n\n    onSave() {\n        const searchParams = getUrlParam();\n\n        let data = {};\n        if (window.payload && isArray(window.payload)) {\n            window.payload.map(e => {\n                data[e] = (document.getElementById(e).value || '').replace(new RegExp('\\n'), '|N|')\n            })\n        }\n\n        let str = JSON.stringify(data) + \"\";\n\n        fetch(URL + '/api/document/save', {\n            method: 'POST',\n            headers: {\n                'Content-type': 'application/json; charset=utf-8'\n            },\n            body: JSON.stringify({\n                id: searchParams.id,\n                data: str,\n                photo: (document.getElementById(\"image\") || {}.src) || \"\"\n            })\n        })\n            .then(e => e.json())\n            .then(e => {\n                if (e.ok === 1) {\n                    alert(\"Lưu thành công\");\n                }\n                else {\n                    alert(\"Lưu thất bại, vui lòng thử lại\");\n                }\n            })\n    }\n\n    componentDidMount() {\n        const searchParams = getUrlParam();\n\n        fetch(URL + '/api/document/get', {\n            method: 'POST',\n            headers: {\n                'Content-type': 'application/json; charset=utf-8'\n            },\n            body: JSON.stringify({\n                id: searchParams.id\n            })\n        })\n            .then(e => e.json())\n            .then(e => {\n                let data = e.data;\n                if (data) {\n                    Object.keys(data).map(key => {\n                        try {\n                            let d = (data[key] || '').replace(new RegExp('\\\\|N\\\\|'), '\\n');\n                            document.getElementById(key).value = d\n                        } catch (err) { }\n                    })\n                }\n\n                if (e.photo) {\n                    document.getElementById(\"image\").src = e.photo;\n                }\n            })\n    }\n\n    onfileChange(e) {\n        let file = e.target.files[0]\n\n        if (file) {\n            const reader = new FileReader();\n\n            reader.onload = function (e) {\n                let base64 = e.target.result;\n                document.getElementById(\"image\").src = base64;\n            }\n\n            reader.readAsDataURL(file);\n        }\n    }\n\n    onZoomIn() {\n        this.setState({\n            zoom: this.state.zoom + 20\n        }, () => {\n            document.getElementById(\"page-container\").style.zoom = this.state.zoom + '%';\n        })\n    }\n\n    onZoomOut() {\n        this.setState({\n            zoom: this.state.zoom - 20\n        }, () => {\n            document.getElementById(\"page-container\").style.zoom = this.state.zoom + '%';\n        })\n    }\n\n    onRemoveImage() {\n        document.getElementById(\"image\").src = null;\n    }\n\n    onViewIdentity() {\n        this.setState({ isOpenIdentityList: true })\n    }\n\n    render() {\n        const searchParams = getUrlParam();\n\n        return <div className='xxx__container' ref='container'>\n            <input type='file' onChange={e => this.onfileChange(e)} id=\"file\" className='custom-file-input' />\n            <button className='xxx-button' onClick={() => this.onRemoveImage()}>Xóa ảnh</button>\n            <div style={{ flex: 1 }}>\n\n            </div>\n            <button className='xxx-button' onClick={() => this.onViewIdentity()}>Xem CMND</button>\n            <button className='xxx-button' onClick={() => this.onZoomIn()}>Phóng to</button>\n            <button className='xxx-button' onClick={() => this.onZoomOut()}>Thu nhỏ</button>\n            <button className='xxx-button' onClick={() => this.onSave()}>Lưu</button>\n            <button className='xxx-button' onClick={() => this.onPrint()}>In</button>\n\n            <IdentityDialog\n                open={this.state.isOpenIdentityList}\n                data={{\n                    fileid: searchParams.id\n                }}\n            />\n        </div>\n    }\n}\n\nReactDOM.render(<App />, document.getElementById('fucking'));"],"sourceRoot":""}